#!/bin/sh
#
# This shell script generates scaffolding for a TET C API test case
# given a list of objects that use the TET C API.
#
# - If the TET extended API function "tet_isdefic" is present, then
#   no scaffolding is generated.  In such cases, the test case
#   is assumed to be self-sufficient.
#
# - If the 'tet_testlist[]' is defined, then no scaffolding is
#   generated.
#
# - Otherwise, a 'struct tet_testlist []' is generated from the names
#   of public functions in the objects.
#
#   Functions with names matching "^tp\(.*\)" are treated as test
#   purposes belonging to a test case named "Default".
#   
#   Functions with names matching '^tc\([a-zA-Z0-9_]*\)_tp\(.*\)'
#   are treated as test purposes belonging to the test case named
#   by the first regular expression.
#
#   Test purposes are invoked in order of ascending text addresses.
#
# - If variables "tet_startup" or "tet_cleanup" are not defined in the
#   objects given to the script, a suitable NULL pointer definition
#   is generated.

usage()
{
	echo `basename $0`: "[options] objects..."
	echo
	echo -e "    Generate TET scaffolding from objects.   Options include:"
	echo -e "\t-o out\t\tcreate output file \"out\" [default \"tc.c\"]."
}

output="tc.c"

args=`getopt o: $*`
if [ ${?} -ne 0 ]; then
	usage
	exit 2
fi

set -- ${args}

for i
do
	case "${i}" in
	-o )
		output="${2}";
		shift; shift;;
	-- )
		shift; break;;
	esac
done

if [ ${#} -eq 0 ]; then
	usage
	exit 2
fi

exec > ${output}
echo "\
/*
 * WARNING! WARNING! WARNING! WARNING! WARNING! WARNING!
 *
 * THIS FILE IS GENERATED FROM: ${@}
 */
#include <tet_api.h>"

if ! nm ${*} | sort -n -k +1 | awk '
	BEGIN {	do_scaffolding = 1; }
	$2 == "T" && $3 ~ "^tc" {
		fnname = substr($3,3);

		if (match(fnname, ".*_tp") == 0)
			next;

		tcname = substr(fnname,RSTART,RLENGTH-3);

		c = tc[tcname]++;
		tp[tcname,c] = $3
	}
	$2 == "T" && $3 ~ "^tp" {
		tcname = "Default";

		c = tc[tcname]++;
		tp[tcname,c++] = $3;
	}
	$2 == "T" && $3 == "tet_isdefic" { do_scaffolding = 0 }
	$2 == "D" && $3 == "tet_testlist" { do_scaffolding = 0 }
	$2 == "D" && $3 == "tet_cleanup" { has_tc_cleanup = 1 }
	$2 == "D" && $3 == "tet_startup" { has_tc_startup = 1 }
	$1 == "U" && $2 == "elfts_compare_files" {
		printf("#include \"elfts-compare-files.c\"\n");
	}
	$1 == "U" && $2 == "elfts_copy_file" {
		printf("#include \"elfts-copy-file.c\"\n");
	}
	$1 == "U" && $2 == "elfts_init_version" {
		printf("#include \"elfts-initversion.c\"\n");
	}
	$1 == "U" && $2 == "elfts_open_file" {
		printf("#include \"elfts-openfile.c\"\n");
	}
	END {
		if (do_scaffolding == 0)
			exit(1);

		if (has_tc_startup == 0) {
			printf("void (*tet_startup)(void) = NULL;\n");
		}

		if (has_tc_cleanup == 0) {
			printf("void (*tet_cleanup)(void) = NULL;\n");
		}

		for (tcname in tc) {
			nc = tc[tcname];
			for (c = 0; c < nc; c++)
				printf("void %s();\n", tp[tcname,c]);
		}

		printf("struct tet_testlist tet_testlist[] = {\n");

		testcase = 0;
		for (tcname in tc) {
			nc = tc[tcname];
			for (c = 0; c < nc; c++)
				printf("\t{%s,%d},\n", tp[tcname,c], testcase);			
			testcase++;
		}

		printf("\t{NULL,0} };\n");
	}'; then
	rm ${output}
	exit 1
fi
